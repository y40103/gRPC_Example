// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package Hello

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// TestClient is the client API for Test service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TestClient interface {
	TypeSimple(ctx context.Context, in *SimpleType, opts ...grpc.CallOption) (*SimpleType, error)
	TypeEnum(ctx context.Context, in *Enumeration, opts ...grpc.CallOption) (*Enumeration, error)
	TypeList(ctx context.Context, in *ListType, opts ...grpc.CallOption) (*ListType, error)
	TypeNested(ctx context.Context, in *NestedType_RequestType, opts ...grpc.CallOption) (*NestedType_RequestType, error)
	TypeMap(ctx context.Context, in *MapType, opts ...grpc.CallOption) (*MapType, error)
	TypeOneof(ctx context.Context, in *OneofType, opts ...grpc.CallOption) (*OneofType, error)
	SayHello0(ctx context.Context, in *RequestType, opts ...grpc.CallOption) (*ResponseType, error)
	SayHello1(ctx context.Context, opts ...grpc.CallOption) (Test_SayHello1Client, error)
	SayHello2(ctx context.Context, in *RequestType, opts ...grpc.CallOption) (Test_SayHello2Client, error)
	SayHello3(ctx context.Context, opts ...grpc.CallOption) (Test_SayHello3Client, error)
}

type testClient struct {
	cc grpc.ClientConnInterface
}

func NewTestClient(cc grpc.ClientConnInterface) TestClient {
	return &testClient{cc}
}

func (c *testClient) TypeSimple(ctx context.Context, in *SimpleType, opts ...grpc.CallOption) (*SimpleType, error) {
	out := new(SimpleType)
	err := c.cc.Invoke(ctx, "/Hello.Test/TypeSimple", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *testClient) TypeEnum(ctx context.Context, in *Enumeration, opts ...grpc.CallOption) (*Enumeration, error) {
	out := new(Enumeration)
	err := c.cc.Invoke(ctx, "/Hello.Test/TypeEnum", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *testClient) TypeList(ctx context.Context, in *ListType, opts ...grpc.CallOption) (*ListType, error) {
	out := new(ListType)
	err := c.cc.Invoke(ctx, "/Hello.Test/TypeList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *testClient) TypeNested(ctx context.Context, in *NestedType_RequestType, opts ...grpc.CallOption) (*NestedType_RequestType, error) {
	out := new(NestedType_RequestType)
	err := c.cc.Invoke(ctx, "/Hello.Test/TypeNested", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *testClient) TypeMap(ctx context.Context, in *MapType, opts ...grpc.CallOption) (*MapType, error) {
	out := new(MapType)
	err := c.cc.Invoke(ctx, "/Hello.Test/TypeMap", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *testClient) TypeOneof(ctx context.Context, in *OneofType, opts ...grpc.CallOption) (*OneofType, error) {
	out := new(OneofType)
	err := c.cc.Invoke(ctx, "/Hello.Test/TypeOneof", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *testClient) SayHello0(ctx context.Context, in *RequestType, opts ...grpc.CallOption) (*ResponseType, error) {
	out := new(ResponseType)
	err := c.cc.Invoke(ctx, "/Hello.Test/SayHello0", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *testClient) SayHello1(ctx context.Context, opts ...grpc.CallOption) (Test_SayHello1Client, error) {
	stream, err := c.cc.NewStream(ctx, &Test_ServiceDesc.Streams[0], "/Hello.Test/SayHello1", opts...)
	if err != nil {
		return nil, err
	}
	x := &testSayHello1Client{stream}
	return x, nil
}

type Test_SayHello1Client interface {
	Send(*RequestType) error
	CloseAndRecv() (*ResponseType, error)
	grpc.ClientStream
}

type testSayHello1Client struct {
	grpc.ClientStream
}

func (x *testSayHello1Client) Send(m *RequestType) error {
	return x.ClientStream.SendMsg(m)
}

func (x *testSayHello1Client) CloseAndRecv() (*ResponseType, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(ResponseType)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *testClient) SayHello2(ctx context.Context, in *RequestType, opts ...grpc.CallOption) (Test_SayHello2Client, error) {
	stream, err := c.cc.NewStream(ctx, &Test_ServiceDesc.Streams[1], "/Hello.Test/SayHello2", opts...)
	if err != nil {
		return nil, err
	}
	x := &testSayHello2Client{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Test_SayHello2Client interface {
	Recv() (*ResponseType, error)
	grpc.ClientStream
}

type testSayHello2Client struct {
	grpc.ClientStream
}

func (x *testSayHello2Client) Recv() (*ResponseType, error) {
	m := new(ResponseType)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *testClient) SayHello3(ctx context.Context, opts ...grpc.CallOption) (Test_SayHello3Client, error) {
	stream, err := c.cc.NewStream(ctx, &Test_ServiceDesc.Streams[2], "/Hello.Test/SayHello3", opts...)
	if err != nil {
		return nil, err
	}
	x := &testSayHello3Client{stream}
	return x, nil
}

type Test_SayHello3Client interface {
	Send(*RequestType) error
	Recv() (*ResponseType, error)
	grpc.ClientStream
}

type testSayHello3Client struct {
	grpc.ClientStream
}

func (x *testSayHello3Client) Send(m *RequestType) error {
	return x.ClientStream.SendMsg(m)
}

func (x *testSayHello3Client) Recv() (*ResponseType, error) {
	m := new(ResponseType)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// TestServer is the server API for Test service.
// All implementations must embed UnimplementedTestServer
// for forward compatibility
type TestServer interface {
	TypeSimple(context.Context, *SimpleType) (*SimpleType, error)
	TypeEnum(context.Context, *Enumeration) (*Enumeration, error)
	TypeList(context.Context, *ListType) (*ListType, error)
	TypeNested(context.Context, *NestedType_RequestType) (*NestedType_RequestType, error)
	TypeMap(context.Context, *MapType) (*MapType, error)
	TypeOneof(context.Context, *OneofType) (*OneofType, error)
	SayHello0(context.Context, *RequestType) (*ResponseType, error)
	SayHello1(Test_SayHello1Server) error
	SayHello2(*RequestType, Test_SayHello2Server) error
	SayHello3(Test_SayHello3Server) error
	mustEmbedUnimplementedTestServer()
}

// UnimplementedTestServer must be embedded to have forward compatible implementations.
type UnimplementedTestServer struct {
}

func (UnimplementedTestServer) TypeSimple(context.Context, *SimpleType) (*SimpleType, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TypeSimple not implemented")
}
func (UnimplementedTestServer) TypeEnum(context.Context, *Enumeration) (*Enumeration, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TypeEnum not implemented")
}
func (UnimplementedTestServer) TypeList(context.Context, *ListType) (*ListType, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TypeList not implemented")
}
func (UnimplementedTestServer) TypeNested(context.Context, *NestedType_RequestType) (*NestedType_RequestType, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TypeNested not implemented")
}
func (UnimplementedTestServer) TypeMap(context.Context, *MapType) (*MapType, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TypeMap not implemented")
}
func (UnimplementedTestServer) TypeOneof(context.Context, *OneofType) (*OneofType, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TypeOneof not implemented")
}
func (UnimplementedTestServer) SayHello0(context.Context, *RequestType) (*ResponseType, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SayHello0 not implemented")
}
func (UnimplementedTestServer) SayHello1(Test_SayHello1Server) error {
	return status.Errorf(codes.Unimplemented, "method SayHello1 not implemented")
}
func (UnimplementedTestServer) SayHello2(*RequestType, Test_SayHello2Server) error {
	return status.Errorf(codes.Unimplemented, "method SayHello2 not implemented")
}
func (UnimplementedTestServer) SayHello3(Test_SayHello3Server) error {
	return status.Errorf(codes.Unimplemented, "method SayHello3 not implemented")
}
func (UnimplementedTestServer) mustEmbedUnimplementedTestServer() {}

// UnsafeTestServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TestServer will
// result in compilation errors.
type UnsafeTestServer interface {
	mustEmbedUnimplementedTestServer()
}

func RegisterTestServer(s grpc.ServiceRegistrar, srv TestServer) {
	s.RegisterService(&Test_ServiceDesc, srv)
}

func _Test_TypeSimple_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SimpleType)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TestServer).TypeSimple(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Hello.Test/TypeSimple",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TestServer).TypeSimple(ctx, req.(*SimpleType))
	}
	return interceptor(ctx, in, info, handler)
}

func _Test_TypeEnum_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Enumeration)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TestServer).TypeEnum(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Hello.Test/TypeEnum",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TestServer).TypeEnum(ctx, req.(*Enumeration))
	}
	return interceptor(ctx, in, info, handler)
}

func _Test_TypeList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListType)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TestServer).TypeList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Hello.Test/TypeList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TestServer).TypeList(ctx, req.(*ListType))
	}
	return interceptor(ctx, in, info, handler)
}

func _Test_TypeNested_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NestedType_RequestType)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TestServer).TypeNested(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Hello.Test/TypeNested",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TestServer).TypeNested(ctx, req.(*NestedType_RequestType))
	}
	return interceptor(ctx, in, info, handler)
}

func _Test_TypeMap_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MapType)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TestServer).TypeMap(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Hello.Test/TypeMap",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TestServer).TypeMap(ctx, req.(*MapType))
	}
	return interceptor(ctx, in, info, handler)
}

func _Test_TypeOneof_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OneofType)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TestServer).TypeOneof(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Hello.Test/TypeOneof",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TestServer).TypeOneof(ctx, req.(*OneofType))
	}
	return interceptor(ctx, in, info, handler)
}

func _Test_SayHello0_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestType)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TestServer).SayHello0(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Hello.Test/SayHello0",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TestServer).SayHello0(ctx, req.(*RequestType))
	}
	return interceptor(ctx, in, info, handler)
}

func _Test_SayHello1_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(TestServer).SayHello1(&testSayHello1Server{stream})
}

type Test_SayHello1Server interface {
	SendAndClose(*ResponseType) error
	Recv() (*RequestType, error)
	grpc.ServerStream
}

type testSayHello1Server struct {
	grpc.ServerStream
}

func (x *testSayHello1Server) SendAndClose(m *ResponseType) error {
	return x.ServerStream.SendMsg(m)
}

func (x *testSayHello1Server) Recv() (*RequestType, error) {
	m := new(RequestType)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Test_SayHello2_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(RequestType)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(TestServer).SayHello2(m, &testSayHello2Server{stream})
}

type Test_SayHello2Server interface {
	Send(*ResponseType) error
	grpc.ServerStream
}

type testSayHello2Server struct {
	grpc.ServerStream
}

func (x *testSayHello2Server) Send(m *ResponseType) error {
	return x.ServerStream.SendMsg(m)
}

func _Test_SayHello3_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(TestServer).SayHello3(&testSayHello3Server{stream})
}

type Test_SayHello3Server interface {
	Send(*ResponseType) error
	Recv() (*RequestType, error)
	grpc.ServerStream
}

type testSayHello3Server struct {
	grpc.ServerStream
}

func (x *testSayHello3Server) Send(m *ResponseType) error {
	return x.ServerStream.SendMsg(m)
}

func (x *testSayHello3Server) Recv() (*RequestType, error) {
	m := new(RequestType)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Test_ServiceDesc is the grpc.ServiceDesc for Test service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Test_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "Hello.Test",
	HandlerType: (*TestServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "TypeSimple",
			Handler:    _Test_TypeSimple_Handler,
		},
		{
			MethodName: "TypeEnum",
			Handler:    _Test_TypeEnum_Handler,
		},
		{
			MethodName: "TypeList",
			Handler:    _Test_TypeList_Handler,
		},
		{
			MethodName: "TypeNested",
			Handler:    _Test_TypeNested_Handler,
		},
		{
			MethodName: "TypeMap",
			Handler:    _Test_TypeMap_Handler,
		},
		{
			MethodName: "TypeOneof",
			Handler:    _Test_TypeOneof_Handler,
		},
		{
			MethodName: "SayHello0",
			Handler:    _Test_SayHello0_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "SayHello1",
			Handler:       _Test_SayHello1_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "SayHello2",
			Handler:       _Test_SayHello2_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "SayHello3",
			Handler:       _Test_SayHello3_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "Hello/Hello/Hello.proto",
}
